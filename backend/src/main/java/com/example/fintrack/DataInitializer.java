package com.example.fintrack;

import com.example.fintrack.bill.Bill;
import com.example.fintrack.bill.BillRepository;
import com.example.fintrack.category.Category;
import com.example.fintrack.category.CategoryRepository;
import com.example.fintrack.chat.Chat;
import com.example.fintrack.chat.ChatRepository;
import com.example.fintrack.friend.FriendStatus;
import com.example.fintrack.lastreadmessage.LastReadMessage;
import com.example.fintrack.lastreadmessage.LastReadMessageRepository;
import com.example.fintrack.limit.Limit;
import com.example.fintrack.limit.LimitRepository;
import com.example.fintrack.currency.Currency;
import com.example.fintrack.currency.CurrencyRepository;
import com.example.fintrack.event.Event;
import com.example.fintrack.event.EventRepository;
import com.example.fintrack.message.Message;
import com.example.fintrack.message.MessageRepository;
import com.example.fintrack.message.MessageType;
import com.example.fintrack.userevent.UserEvent;
import com.example.fintrack.userevent.UserEventRepository;
import com.example.fintrack.friend.Friend;
import com.example.fintrack.friend.FriendRepository;
import com.example.fintrack.rate.Rate;
import com.example.fintrack.rate.RateRepository;
import com.example.fintrack.user.User;
import com.example.fintrack.user.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.time.ZonedDateTime;
import java.util.List;

@Component
@RequiredArgsConstructor
public class DataInitializer implements CommandLineRunner {

    private final PasswordEncoder passwordEncoder;
    private final LimitRepository limitRepository;
    private final CurrencyRepository currencyRepository;
    private final RateRepository rateRepository;
    private final UserRepository userRepository;
    private final CategoryRepository categoryRepository;
    private final EventRepository eventRepository;
    private final UserEventRepository userEventRepository;
    private final BillRepository billRepository;
    private final FriendRepository friendRepository;
    private final ChatRepository chatRepository;
    private final MessageRepository messageRepository;
    private final LastReadMessageRepository lastReadMessageRepository;

    @Override
    public void run(String... args) {
        Currency currency1 = new Currency();
        currency1.setName("Polish ZÅ‚oty");
        currency1.setCode("PLN");
        Currency currency2 = new Currency();
        currency2.setName("Euro");
        currency2.setCode("EUR");
        Currency currency3 = new Currency();
        currency3.setName("United States dollar");
        currency3.setCode("USD");
        Currency currency4 = new Currency();
        currency4.setName("Pound sterling");
        currency4.setCode("GBP");
        Currency currency5 = new Currency();
        currency5.setName("Swiss franc");
        currency5.setCode("CHF");
        Currency currency6 = new Currency();
        currency6.setName("Czech koruna");
        currency6.setCode("CZK");
        currencyRepository.saveAll(List.of(currency1, currency2, currency3, currency4, currency5, currency6));

        Rate rate1 = new Rate();
        rate1.setDate(ZonedDateTime.now());
        rate1.setCurrency(currency1);
        rate1.setAmount(BigDecimal.valueOf(3.7479));
        Rate rate2 = new Rate();
        rate2.setDate(ZonedDateTime.now());
        rate2.setCurrency(currency2);
        rate2.setAmount(BigDecimal.valueOf(0.8836));
        Rate rate3 = new Rate();
        rate3.setDate(ZonedDateTime.now());
        rate3.setCurrency(currency3);
        rate3.setAmount(BigDecimal.valueOf(1));
        Rate rate4 = new Rate();
        rate4.setDate(ZonedDateTime.now());
        rate4.setCurrency(currency4);
        rate4.setAmount(BigDecimal.valueOf(0.7421));
        Rate rate5 = new Rate();
        rate5.setDate(ZonedDateTime.now());
        rate5.setCurrency(currency5);
        rate5.setAmount(BigDecimal.valueOf(0.8274));
        Rate rate6 = new Rate();
        rate6.setDate(ZonedDateTime.now());
        rate6.setCurrency(currency6);
        rate6.setAmount(BigDecimal.valueOf(22.0220));
        rateRepository.saveAll(List.of(rate1, rate2, rate3, rate4, rate5, rate6));

        User user1 = new User();
        user1.setFirstName("abc");
        user1.setLastName("def");
        user1.setEmail("abc@def.com");
        user1.setPassword(passwordEncoder.encode("password"));
        user1.setCurrency(currency1);
        User user2 = new User();
        user2.setFirstName("qwe");
        user2.setLastName("zxc");
        user2.setEmail("qwe@zxc.com");
        user2.setPassword(passwordEncoder.encode("password"));
        user2.setCurrency(currency1);
        User user3 = new User();
        user3.setFirstName("asd");
        user3.setLastName("qwe");
        user3.setEmail("asd@qwe.com");
        user3.setPassword(passwordEncoder.encode("password"));
        user3.setCurrency(currency2);
        userRepository.saveAll(List.of(user1, user2, user3));

        Chat chat1 = new Chat();
        Chat chat2 = new Chat();
        Chat chat3 = new Chat();
        Chat chat4 = new Chat();
        Chat chat5 = new Chat();
        chatRepository.saveAll(List.of(chat1, chat2, chat3, chat4, chat5));

        Friend friend1 = new Friend();
        friend1.setUser(user1);
        friend1.setFriend(user2);
        friend1.setCreatedAt(ZonedDateTime.now());
        friend1.setFriendStatus(FriendStatus.ACCEPTED);
        friend1.setChat(chat1);
        Friend friend2 = new Friend();
        friend2.setUser(user1);
        friend2.setFriend(user3);
        friend2.setCreatedAt(ZonedDateTime.now());
        friend2.setFriendStatus(FriendStatus.REQUESTED);
        friend2.setChat(chat2);
        Friend friend3 = new Friend();
        friend3.setUser(user2);
        friend3.setFriend(user1);
        friend3.setCreatedAt(ZonedDateTime.now());
        friend3.setFriendStatus(FriendStatus.ACCEPTED);
        friend3.setChat(chat1);
        Friend friend4 = new Friend();
        friend4.setUser(user3);
        friend4.setFriend(user1);
        friend4.setCreatedAt(ZonedDateTime.now());
        friend4.setFriendStatus(FriendStatus.PENDING);
        friend4.setChat(chat2);
        friendRepository.saveAll(List.of(friend1, friend2, friend3, friend4));

        Category category1 = new Category();
        category1.setName("Groceries");
        category1.setColor("#42FF81");
        category1.setUser(user1);
        Category category2 = new Category();
        category2.setName("Car");
        category2.setColor("#EF2727");
        category2.setUser(user1);
        Category category3 = new Category();
        category3.setName("Clothing");
        category3.setColor("#423E43");
        category3.setUser(user1);
        Category category4 = new Category();
        category4.setName("Flat");
        category4.setColor("#C1F308");
        category4.setUser(user2);
        Category category5 = new Category();
        category5.setName("Groceries");
        category5.setColor("#DEA910");
        category5.setUser(user2);
        Category category6 = new Category();
        category6.setName("Clothing");
        category6.setColor("#F9D7E3");
        category6.setUser(user3);
        categoryRepository.saveAll(List.of(category1, category2, category3, category4, category5, category6));

        Limit limit1 = new Limit();
        limit1.setAmount(new BigDecimal("500"));
        limit1.setCategory(category1);
        limit1.setStartDateTime(ZonedDateTime.now());
        Limit limit2 = new Limit();
        limit2.setAmount(new BigDecimal("400"));
        limit2.setCategory(category2);
        limit2.setStartDateTime(ZonedDateTime.now());
        Limit limit3 = new Limit();
        limit3.setAmount(new BigDecimal("800"));
        limit3.setCategory(category4);
        limit3.setStartDateTime(ZonedDateTime.now());
        Limit limit4 = new Limit();
        limit4.setAmount(new BigDecimal("300"));
        limit4.setCategory(category5);
        limit4.setStartDateTime(ZonedDateTime.now());
        Limit limit5 = new Limit();
        limit5.setAmount(new BigDecimal("400"));
        limit5.setCategory(category6);
        limit5.setStartDateTime(ZonedDateTime.now());
        limitRepository.saveAll(List.of(limit1, limit2, limit3, limit4, limit5));

        Event event1 = new Event();
        event1.setName("Germany trip");
        event1.setCurrency(currency1);
        event1.setStartDateTime(ZonedDateTime.now());
        event1.setChat(chat3);
        Event event2 = new Event();
        event2.setName("Birthday gift");
        event2.setCurrency(currency1);
        event2.setStartDateTime(ZonedDateTime.now());
        event2.setChat(chat4);
        Event event3 = new Event();
        event3.setName("Warsaw trip");
        event3.setCurrency(currency2);
        event3.setStartDateTime(ZonedDateTime.now());
        event3.setChat(chat5);
        eventRepository.saveAll(List.of(event1, event2, event3));

        UserEvent userEvent1 = new UserEvent();
        userEvent1.setIsFounder(true);
        userEvent1.setUser(user1);
        userEvent1.setEvent(event1);
        UserEvent userEvent2 = new UserEvent();
        userEvent2.setIsFounder(false);
        userEvent2.setUser(user2);
        userEvent2.setEvent(event1);
        UserEvent userEvent3 = new UserEvent();
        userEvent3.setIsFounder(false);
        userEvent3.setUser(user3);
        userEvent3.setEvent(event1);
        UserEvent userEvent4 = new UserEvent();
        userEvent4.setIsFounder(true);
        userEvent4.setUser(user1);
        userEvent4.setEvent(event2);
        UserEvent userEvent5 = new UserEvent();
        userEvent5.setIsFounder(false);
        userEvent5.setUser(user2);
        userEvent5.setEvent(event2);
        UserEvent userEvent6 = new UserEvent();
        userEvent6.setIsFounder(true);
        userEvent6.setUser(user2);
        userEvent6.setEvent(event3);
        UserEvent userEvent7 = new UserEvent();
        userEvent7.setIsFounder(false);
        userEvent7.setUser(user3);
        userEvent7.setEvent(event3);
        userEventRepository.saveAll(List.of(userEvent1, userEvent2, userEvent3, userEvent4, userEvent5, userEvent6, userEvent7));

        Message message1 = new Message();
        message1.setChat(chat1);
        message1.setMessageType(MessageType.USER);
        message1.setSendTime(ZonedDateTime.now());
        message1.setContent("Hello");
        message1.setSentBy(user1);
        Message message2 = new Message();
        message2.setChat(chat1);
        message2.setMessageType(MessageType.USER);
        message2.setSendTime(ZonedDateTime.now());
        message2.setContent("Good morning");
        message2.setSentBy(user2);
        messageRepository.saveAll(List.of(message1, message2));

        LastReadMessage lastReadMessage1 = new LastReadMessage();
        lastReadMessage1.setMessage(message2);
        lastReadMessage1.setReadTime(ZonedDateTime.now());
        lastReadMessage1.setChat(chat1);
        lastReadMessage1.setUser(user1);
        LastReadMessage lastReadMessage2 = new LastReadMessage();
        lastReadMessage2.setMessage(message2);
        lastReadMessage2.setReadTime(ZonedDateTime.now());
        lastReadMessage2.setChat(chat1);
        lastReadMessage2.setUser(user2);
        lastReadMessageRepository.saveAll(List.of(lastReadMessage1, lastReadMessage2));

        Bill bill1 = new Bill();
        bill1.setName("Restaurant");
        bill1.setDate(ZonedDateTime.now());
        bill1.setCategory(category1);
        bill1.setCurrency(currency1);
        bill1.setUser(user1);
        bill1.setAmount(BigDecimal.valueOf(50));
        Bill bill2 = new Bill();
        bill2.setName("Fuel");
        bill2.setDate(ZonedDateTime.now());
        bill2.setCategory(category2);
        bill2.setCurrency(currency1);
        bill2.setUser(user1);
        bill2.setAmount(BigDecimal.valueOf(150));
        Bill bill3 = new Bill();
        bill3.setName("Taxi");
        bill3.setDate(ZonedDateTime.now());
        bill3.setCategory(category2);
        bill3.setCurrency(currency1);
        bill3.setEvent(event1);
        bill3.setPaidBy(user1);
        bill3.setAmount(BigDecimal.valueOf(100));
        Bill bill4 = new Bill();
        bill4.setName("Tickets");
        bill4.setDate(ZonedDateTime.now());
        bill4.setCategory(category3);
        bill4.setCurrency(currency1);
        bill4.setEvent(event2);
        bill4.setPaidBy(user1);
        bill4.setAmount(BigDecimal.valueOf(100));
        Bill bill5 = new Bill();
        bill5.setName("Pizza");
        bill5.setDate(ZonedDateTime.now());
        bill5.setCategory(category4);
        bill5.setCurrency(currency1);
        bill5.setUser(user2);
        bill5.setAmount(BigDecimal.valueOf(200));
        Bill bill6 = new Bill();
        bill6.setName("Potatoes");
        bill6.setDate(ZonedDateTime.now());
        bill6.setCategory(category4);
        bill6.setCurrency(currency1);
        bill6.setUser(user3);
        bill6.setAmount(BigDecimal.valueOf(50));
        Bill bill7 = new Bill();
        bill7.setName("Water");
        bill7.setDate(ZonedDateTime.now());
        bill7.setCategory(category4);
        bill7.setCurrency(currency1);
        bill7.setEvent(event1);
        bill7.setPaidBy(user2);
        bill7.setAmount(BigDecimal.valueOf(100));
        billRepository.saveAll(List.of(bill1, bill2, bill3, bill4, bill5, bill6, bill7));
    }
}
